// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("client")
  cart      Cart? // Relation avec le panier
  orders    Order[] // Relation avec les commandes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  image       String?
  category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  String?
  cartItems   CartItem[]
  orderItems  OrderProduct[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  image       String?
  products    Product[]
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)

  @@unique([cartId, productId])
}

model Order {
  id        String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  total     Float
  status    String         @default("Pending")
  items     OrderProduct[]
  payment   Payment? // Relation avec le paiement
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model OrderProduct {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Payment {
  id            String   @id @default(uuid())
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String   @unique
  amount        Float
  status        String   @default("Pending") // "Completed", "Failed", etc.
  method        String // Exemple: "Credit Card", "Paypal"
  transactionId String   @unique // ID unique de transaction
  createdAt     DateTime @default(now())
}
